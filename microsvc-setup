

# SETUP KUBERNETES APPLICATION
minikube start  --cpus='4' --memory='8192m' --nodes=5
kubectl create namespace microsvc-demo
kubectl config set-context --current --namespace=microsvc-demo
kubectl taint nodes minikube application=microsvc-demo:NoSchedule



# DEPLOY DEMO APPLICATION
# Deploy a demo app. Need to do adservice first
kubectl apply -f release/adservice-kubernetes-manifests.yaml -n microsvc-demo

# make sure adservice is complete before running the custom below
kubectl apply -f release/custom-kubernetes-manifests.yaml -n microsvc-demo

# port-forward the front-end service 8080:80
http://localhost:8080



# MONITORING
# Setup and deploy prometheus; Create namespace for monitoring first
kubectl create namespace monitoring
kubectl config set-context --current --namespace=monitoring

# Deploy prometheus-kafka-adapter
git clone git@github.com:cloud-native-ops/prometheus-kafka-adapter.git
cd ~/dvl/prometheus-kafka-adapter/helm/prometheus-kafka-adapter

# Update values.yaml
```
    # defines kafka endpoint and port, defaults to kafka:9092.
    KAFKA_BROKER_LIST: "137.184.163.23:9092"
    # defines kafka topic to be used, defaults to metrics.
    KAFKA_TOPIC: "test"
```
helm template . --values values.yaml > prometheus-kafka-adapter.yaml
# 1. Check that the prometheus-kafka-adapter.yaml contains namespace "monitoring" and 
#       not "default" (the set-context --current --namespace=monitoring achieves this)
# 2. Remove readiness and liveliness probe (due to 404s)
kubectl apply -f prometheus-kafka-adapter.yaml
# Get the service name of the adapter e.g. :    release-name-prometheus-kafka-adapter 


# Deploy prometheus/grafana
# Option 1
# Deploy Prometheus (one-time thing; run 2 lines below if never run before)
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
helm install monitoring prometheus-community/kube-prometheus-stack -n monitoring

# Option 2
# Clone repo
cd ~/dvl
git clone git@github.com:cloud-native-ops/helm-charts.git
cd helm-charts/charts/kube-prometheus-stack
# Update values.yaml 
    remoteWrite: [release-name-prometheus-kafka-adapter]

helm repo add grafana-help-chart https://grafana.github.io/helm-charts
helm repo update
helm dependency build
helm template . --values values.yaml > kube-prometheus-stack.yaml
kubectl apply -f kube-prometheus-stack.yaml
    

# port forward localhost 3000 to monitoring-grafana 3000
http://localhost:3000




# Last but not the least, run the load generator
# ADJUST THE NUMBER OF USERS IF YOU MUST
kubectl apply -f release/load-generator-kubernetes-manifests.yaml


# Cleanup

minikube stop
minikube delete




# build
minikube start  --cpus='4' --memory='8192m'
skaffold run



